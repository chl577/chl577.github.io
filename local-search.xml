<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xxl-job原理分析</title>
    <link href="/2025/04/24/xxl-job%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/2025/04/24/xxl-job%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="设计思想"><a href="#设计思想" class="headerlink" title="设计思想"></a>设计思想</h3><p><font style="color:rgb(51, 51, 51);">将调度行为抽象形成“调度中心”公共平台，而平台自身并不承担业务逻辑，“调度中心”负责发起调度请求。</font></p><p><font style="color:rgb(51, 51, 51);">将任务抽象成分散的JobHandler，交由“执行器”统一管理，“执行器”负责接收调度请求并执行对应的JobHandler中业务逻辑。</font></p><p><font style="color:rgb(51, 51, 51);">因此，“调度”和“任务”两部分可以相互解耦，提高系统整体稳定性和扩展性；</font></p><h3 id="系统组成"><a href="#系统组成" class="headerlink" title="系统组成"></a><font style="color:rgb(51, 51, 51);">系统组成</font></h3><ul><li><strong><font style="color:rgb(51, 51, 51);">调度模块（调度中心）</font></strong><font style="color:rgb(51, 51, 51);">：<br></font><font style="color:rgb(51, 51, 51);">负责管理调度信息，按照调度配置发出调度请求，自身不承担业务代码。调度系统与任务解耦，提高了系统可用性和稳定性，同时调度系统性能不再受限于任务模块；<br></font><font style="color:rgb(51, 51, 51);">支持可视化、简单且动态的管理调度信息。</font></li><li><strong><font style="color:rgb(51, 51, 51);">执行模块（执行器）</font></strong><font style="color:rgb(51, 51, 51);">：<br></font><font style="color:rgb(51, 51, 51);">负责接收调度请求并执行任务逻辑。任务模块专注于任务的执行等操作，开发和维护更加简单和高效；<br></font><font style="color:rgb(51, 51, 51);">接收“调度中心”的执行请求、终止请求和日志请求等。</font></li></ul><h3 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a><font style="color:rgb(51, 51, 51);">架构图</font></h3><p><img src="/images/xxljob1.png"></p><h2 id="各模块剖析"><a href="#各模块剖析" class="headerlink" title="各模块剖析"></a>各模块剖析</h2><h3 id="调度模块剖析"><a href="#调度模块剖析" class="headerlink" title="调度模块剖析"></a>调度模块剖析</h3><h4 id="调度中心HA（集群）"><a href="#调度中心HA（集群）" class="headerlink" title="调度中心HA（集群）"></a><font style="color:rgb(51, 51, 51);">调度中心HA（集群）</font></h4><p><font style="color:rgb(51, 51, 51);">基于数据库的集群方案，数据库选用Mysql；集群分布式并发环境中进行定时任务调度时，会在各个节点会上报任务，存到数据库中，执行时会从数据库中取出触发器来执行，如果触发器的名称和执行时间相同，则只有一个节点去执行此任务。</font></p><h4 id="调度线程池"><a href="#调度线程池" class="headerlink" title="调度线程池"></a><font style="color:rgb(51, 51, 51);">调度线程池</font></h4><p><font style="color:rgb(51, 51, 51);">调度采用线程池方式实现，避免单线程因阻塞而引起任务调度延迟。</font></p><h4 id="过期处理策略"><a href="#过期处理策略" class="headerlink" title="过期处理策略"></a><font style="color:rgb(51, 51, 51);">过期处理策略</font></h4><p><font style="color:rgb(51, 51, 51);">任务调度错过触发时间时的处理策略：</font></p><ul><li><font style="color:rgb(51, 51, 51);">可能原因：服务重启；调度线程被阻塞，线程被耗尽；上次调度持续阻塞，下次调度被错过；</font></li><li><font style="color:rgb(51, 51, 51);">处理策略：</font><ul><li><font style="color:rgb(51, 51, 51);">过期超5s：本次忽略，当前时间开始计算下次触发时间</font></li><li><font style="color:rgb(51, 51, 51);">过期5s内：立即触发一次，当前时间开始计算下次触发时间</font></li></ul></li></ul><h4 id="任务HA（Failover）"><a href="#任务HA（Failover）" class="headerlink" title="任务HA（Failover）"></a><font style="color:rgb(51, 51, 51);">任务HA（Failover）</font></h4><p><font style="color:rgb(51, 51, 51);">执行器如若集群部署，调度中心将会感知到在线的所有执行器，如“127.0.0.1:9997, 127.0.0.1:9998, 127.0.0.1:9999”。</font></p><p><font style="color:rgb(51, 51, 51);">当任务”路由策略”选择”故障转移(FAILOVER)”时，当调度中心每次发起调度请求时，会按照顺序对执行器发出心跳检测请求，第一个检测为存活状态的执行器将会被选定并发送调度请求。</font></p><h4 id="全异步化-轻量级"><a href="#全异步化-轻量级" class="headerlink" title="全异步化 &amp; 轻量级"></a><font style="color:rgb(51, 51, 51);">全异步化 &amp; 轻量级</font></h4><ul><li><font style="color:rgb(51, 51, 51);">全异步化设计：XXL-JOB系统中业务逻辑在远程执行器执行，触发流程全异步化设计。相比直接在调度中心内部执行业务逻辑，极大的降低了调度线程占用时间；</font><ul><li><font style="color:rgb(51, 51, 51);">异步调度：调度中心每次任务触发时仅发送一次调度请求，该调度请求首先推送“异步调度队列”，然后异步推送给远程执行器</font></li><li><font style="color:rgb(51, 51, 51);">异步执行：执行器会将请求存入“异步执行队列”并且立即响应调度中心，异步运行。</font></li></ul></li><li><font style="color:rgb(51, 51, 51);">轻量级设计：XXL-JOB调度中心中每个JOB逻辑非常 “轻”，在全异步化的基础上，单个JOB一次运行平均耗时基本在 “10ms” 之内（基本为一次请求的网络开销）；因此，可以保证使用有限的线程支撑大量的JOB并发运行；</font></li></ul><p><font style="color:rgb(51, 51, 51);">得益于上述两点优化，理论上默认配置下的调度中心，单机能够支撑 5000 任务并发运行稳定运行；</font></p><h4 id="均衡调度"><a href="#均衡调度" class="headerlink" title="均衡调度"></a><font style="color:rgb(51, 51, 51);">均衡调度</font></h4><p><font style="color:rgb(51, 51, 51);">调度中心在集群部署时会自动进行任务平均分配，触发组件每次获取与线程池数量（调度中心支持自定义调度线程池大小）相关数量的任务，避免大量任务集中在单个调度中心集群节点；</font></p><h3 id="通讯模块剖析"><a href="#通讯模块剖析" class="headerlink" title="通讯模块剖析"></a><font style="color:rgb(51, 51, 51);">通讯模块剖析</font></h3><h4 id="一次完整的任务调度通讯流程"><a href="#一次完整的任务调度通讯流程" class="headerlink" title="一次完整的任务调度通讯流程"></a><font style="color:rgb(51, 51, 51);">一次完整的任务调度通讯流程</font></h4><p><font style="color:rgb(0, 102, 102);"></font><font style="color:rgb(102, 102, 0);">“调度中心”向“执行器”发送</font><font style="color:rgb(0, 0, 0);">http</font><font style="color:rgb(102, 102, 0);">调度请求:</font><font style="color:rgb(0, 0, 0);"> </font></p><p><font style="color:rgb(102, 102, 0);">“执行器”中接收请求的服务，实际上是一台内嵌</font><font style="color:rgb(102, 0, 102);">Server</font><font style="color:rgb(102, 102, 0);">，默认端口</font><font style="color:rgb(0, 102, 102);">9999</font></p><p><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">“执行器”执行任务逻辑；</font></p><p><font style="color:rgb(0, 102, 102);"></font><font style="color:rgb(102, 102, 0);">“执行器”</font><font style="color:rgb(0, 0, 0);">http</font><font style="color:rgb(102, 102, 0);">回调“调度中心”调度结果:</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">“调度中心”中接收回调的服务，是针对执行器开放一套</font><font style="color:rgb(0, 0, 0);">API</font><font style="color:rgb(102, 102, 0);">服务;</font></p><h4 id="通讯数据加密"><a href="#通讯数据加密" class="headerlink" title="通讯数据加密"></a><font style="color:rgb(51, 51, 51);">通讯数据加密</font></h4><p><font style="color:rgb(51, 51, 51);">调度中心向执行器发送的调度请求时使用RequestModel和ResponseModel两个对象封装调度请求参数和响应数据, 在进行通讯之前底层会将上述两个对象对象序列化，并进行数据协议以及时间戳检验,从而达到数据加密的功能;</font></p><h4 id="任务注册-任务自动发现"><a href="#任务注册-任务自动发现" class="headerlink" title="任务注册, 任务自动发现"></a><font style="color:rgb(51, 51, 51);">任务注册, 任务自动发现</font></h4><p><font style="color:rgb(51, 51, 51);">自v1.5版本之后, 任务取消了”任务执行机器”属性, 改为通过任务注册和自动发现的方式, 动态获取远程执行器地址并执行。</font></p><p><font style="color:rgb(102, 0, 102);">AppName</font><font style="color:rgb(102, 102, 0);">:</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">每个执行器机器集群的唯一标示,</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">任务注册以</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(0, 136, 0);">“执行器”</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">为最小粒度进行注册;</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">每个任务通过其绑定的执行器可感知对应的执行器机器列表;</font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">注册表:</font><font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);"> </font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">见</font><font style="color:rgb(0, 136, 0);background-color:rgb(238, 238, 238);">“xxl_job_registry”</font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">表,</font><font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);"> </font><font style="color:rgb(0, 136, 0);background-color:rgb(238, 238, 238);">“执行器”</font><font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);"> </font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">在进行任务注册时将会周期性维护一条注册记录，即机器地址和</font><font style="color:rgb(102, 0, 102);background-color:rgb(238, 238, 238);">AppName</font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">的绑定关系;</font><font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);"> </font><font style="color:rgb(0, 136, 0);background-color:rgb(238, 238, 238);">“调度中心”</font><font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);"> </font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">从而可以动态感知每个</font><font style="color:rgb(102, 0, 102);background-color:rgb(238, 238, 238);">AppName</font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">在线的机器列表;</font><font style="color:rgb(102, 102, 0);">执行器注册:</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">任务注册</font><font style="color:rgb(102, 0, 102);">Beat</font><font style="color:rgb(102, 102, 0);">周期默认</font><font style="color:rgb(0, 102, 102);">30s</font><font style="color:rgb(102, 102, 0);">;</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">执行器以一倍</font><font style="color:rgb(102, 0, 102);">Beat</font><font style="color:rgb(102, 102, 0);">进行执行器注册,</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">调度中心以一倍</font><font style="color:rgb(102, 0, 102);">Beat</font><font style="color:rgb(102, 102, 0);">进行动态任务发现;</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);">注册信息的失效时间为三倍</font><font style="color:rgb(102, 0, 102);">Beat</font><font style="color:rgb(102, 102, 0);">;</font><font style="color:rgb(0, 0, 0);"> </font><font style="color:rgb(102, 102, 0);background-color:rgb(238, 238, 238);">执行器注册摘除：执行器销毁时，将会主动上报调度中心并摘除对应的执行器机器信息，提高心跳注册的实时性；</font></p><h3 id="访问令牌（AccessToken）"><a href="#访问令牌（AccessToken）" class="headerlink" title="访问令牌（AccessToken）"></a><font style="color:rgb(51, 51, 51);">访问令牌（AccessToken）</font></h3><p><font style="color:rgb(51, 51, 51);">为提升系统安全性，调度中心和执行器进行安全性校验，双方AccessToken匹配才允许通讯；</font></p><p><font style="color:rgb(51, 51, 51);">调度中心和执行器，可通过配置项 “xxl.job.accessToken” 进行AccessToken的设置。</font></p><p><font style="color:rgb(51, 51, 51);">调度中心和执行器，如果需要正常通讯，只有两种设置；</font></p><ul><li><font style="color:rgb(51, 51, 51);">设置一：调度中心和执行器，均不设置AccessToken；关闭安全性校验；</font></li><li><font style="color:rgb(51, 51, 51);">设置二：调度中心和执行器，设置了相同的AccessToken；</font></li></ul><h3 id="故障转移-失败重试"><a href="#故障转移-失败重试" class="headerlink" title="故障转移 &amp; 失败重试"></a><font style="color:rgb(51, 51, 51);">故障转移 &amp; 失败重试</font></h3><p><font style="color:rgb(51, 51, 51);">一次完整任务流程包括”调度（调度中心） + 执行（执行器）”两个阶段。</font></p><ul><li><font style="color:rgb(51, 51, 51);">“故障转移”发生在调度阶段，在执行器集群部署时，如果某一台执行器发生故障，该策略支持自动进行Failover切换到一台正常的执行器机器并且完成调度请求流程。</font></li><li><font style="color:rgb(51, 51, 51);">“失败重试”发生在”调度 + 执行”两个阶段，支持通过自定义任务失败重试次数，当任务失败时将会按照预设的失败重试次数主动进行重试；</font></li></ul><h3 id="执行器灰度上线"><a href="#执行器灰度上线" class="headerlink" title="执行器灰度上线"></a><font style="color:rgb(51, 51, 51);">执行器灰度上线</font></h3><p><font style="color:rgb(51, 51, 51);">调度中心与业务解耦，只需部署一次后常年不需要维护。但是，执行器中托管运行着业务作业，作业上线和变更需要重启执行器，尤其是Bean模式任务。<br></font><font style="color:rgb(51, 51, 51);">执行器重启可能会中断运行中的任务。但是，XXL-JOB得益于自建执行器与自建注册中心，可以通过灰度上线的方式，避免因重启导致的任务中断的问题。</font></p><p><font style="color:rgb(51, 51, 51);">步骤如下：</font></p><ul><li><font style="color:rgb(51, 51, 51);">1、执行器改为手动注册，下线一半机器列表（A组），线上运行另一半机器列表（B组）；</font></li><li><font style="color:rgb(51, 51, 51);">2、等待A组机器任务运行结束并编译上线；执行器注册地址替换为A组；</font></li><li><font style="color:rgb(51, 51, 51);">3、等待B组机器任务运行结束并编译上线；执行器注册地址替换为A组+B组；<br></font><font style="color:rgb(51, 51, 51);">操作结束；</font></li></ul><h3 id="任务超时控制"><a href="#任务超时控制" class="headerlink" title="任务超时控制"></a><font style="color:rgb(51, 51, 51);">任务超时控制</font></h3><p><font style="color:rgb(51, 51, 51);">支持设置任务超时时间，任务运行超时的情况下，将会主动中断任务；</font></p><p><font style="color:rgb(51, 51, 51);">需要注意的是，任务超时中断时与任务终止机制。类似，也是通过 “interrupt” 中断任务，因此业务代码需要将 “InterruptedException” 外抛，否则功能不可用。</font></p><h3 id="任务失败告警"><a href="#任务失败告警" class="headerlink" title="任务失败告警"></a><font style="color:rgb(51, 51, 51);">任务失败告警</font></h3><p><font style="color:rgb(51, 51, 51);">默认提供邮件失败告警，可扩展短信、钉钉等方式。如果需要新增一种告警方式，只需要新增一个实现 “com.xxl.job.admin.core.alarm.JobAlarm” 接口的告警实现即可。可以参考默认提供邮箱告警实现 “EmailJobAlarm”。</font></p><h3 id="避免任务重复执行"><a href="#避免任务重复执行" class="headerlink" title="避免任务重复执行"></a><font style="color:rgb(51, 51, 51);">避免任务重复执行</font></h3><p><font style="color:rgb(51, 51, 51);">调度密集或者耗时任务可能会导致任务阻塞，集群情况下调度组件小概率情况下会重复触发；<br></font><font style="color:rgb(51, 51, 51);">针对上述情况，可以通过结合 “单机路由策略（如：第一台、一致性哈希）” + “阻塞策略（如：单机串行、丢弃后续调度）” 来规避，最终避免任务重复执行。</font></p><h3 id="调度结果丢失处理"><a href="#调度结果丢失处理" class="headerlink" title="调度结果丢失处理"></a><font style="color:rgb(51, 51, 51);">调度结果丢失处理</font></h3><p><font style="color:rgb(51, 51, 51);">执行器因网络抖动回调失败或宕机等异常情况，会导致任务调度结果丢失。由于调度中心依赖执行器回调来感知调度结果，因此会导致调度日志永远处于 “运行中” 状态。</font></p><p><font style="color:rgb(51, 51, 51);">针对该问题，调度中心提供内置组件进行处理，逻辑为：调度记录停留在 “运行中” 状态超过10min，且对应执行器心跳注册失败不在线，则将本地调度主动标记失败；</font></p><h2 id="客户端启动流程"><a href="#客户端启动流程" class="headerlink" title="客户端启动流程"></a>客户端启动流程</h2><p><img src="/images/xxljob2.svg"></p><h2 id="服务端启动流程"><a href="#服务端启动流程" class="headerlink" title="服务端启动流程"></a>服务端启动流程</h2><p><img src="/images/xxljob3.svg"></p><h2 id="调度任务的具体流程"><a href="#调度任务的具体流程" class="headerlink" title="调度任务的具体流程"></a>调度任务的具体流程</h2><p><img src="/images/xxljob4.svg"></p><h2 id="时间轮"><a href="#时间轮" class="headerlink" title="时间轮"></a>时间轮</h2><p><img src="/images/xxljob5.png"></p><p><img src="/images/xxljob8.png"></p><h2 id="执行器处理任务"><a href="#执行器处理任务" class="headerlink" title="执行器处理任务"></a>执行器处理任务</h2><p><img src="/images/xxljob6.svg"></p><p><img src="/images/xxljob7.svg"></p>]]></content>
    
    
    <categories>
      
      <category>xxl-job</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xxl-job</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RMB压缩算法</title>
    <link href="/2025/04/24/RMB%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/"/>
    <url>/2025/04/24/RMB%E5%8E%8B%E7%BC%A9%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><h1 id="FOR算法-Frame-Of-Reference"><a href="#FOR算法-Frame-Of-Reference" class="headerlink" title="FOR算法(Frame Of Reference)"></a>FOR算法(Frame Of Reference)</h1><p>FOR算法的核心思想是用减法来削减数值大小，从而达到降低空间存储。</p><p>假设V(n)表示数组中第n个字段的值，那么经过FOR算法压缩的数值V(n)&#x3D;V(n)-V(n-1)。也就是说存储的是后一位减去前一位的差值。存储是也不再按照int来计算了，而是看这个数组的最大值需要占用多少bit来计算</p><p>具体我们通过一个例子来体会：</p><p>比如数组是73,300,302,332,342,372，原本需要4 * 6 byte &#x3D; 24byte &#x3D; 192bit</p><p>压缩后：73,227,2,30,11,29</p><p>这些数中227是最大的，需要8bit（227 &lt; 2^8）来盛装，那么每个数值都不会超过8bit，所以需要的大小是6 * 8bit&#x3D;48bit，我们把8bit的容器理解为一个箱子，总共需要6个箱子，所有箱子占48bit，但是这并不是我们的总大小，因为相比较于原数组，我们引入了一个箱子的概念，那么除了箱子数，我们还需要记录每个箱子的大小，所以需要有一个数来记录箱子大小，这里注意我们规定盛装大小不超过256bit，因此箱子大小值最大不超过2^8，即箱子大小值占用不超过8bit，因此总共的大小是48bit+8bit &#x3D; 56bit</p><p>可以看到压缩后大小由192bit降到了56bit，已经有很大改善了，但是这还不是FOR算法的终点，观察这组数中最大值227,后一位最小值是2，两者相差很大，2实际上只需要1bit来盛装，那么能不能进一步压缩呢？答案是可以，只是不再需要做差值，直接将数组分组，将其拆分为：</p><p>73,227</p><p>2,30,11,29</p><p>那么占用空间就变成了73,227箱子大小8bit，2,30,11,29中最大30，箱子大小为5bit</p><p>因此数组总大小为28bit + 45bit &#x3D; 36bit，另外不要忘记这里因为分成两组，还需要单独记录两组箱子的大小值，所以总大小是36bit+2*8bit&#x3D; 52bit</p><p><img src="/images/rmb1.png"></p><p><font style="color:rgb(77, 77, 77);">以上就是FOR算法的概念，总结一下：</font><br><font style="color:rgb(77, 77, 77);">（1）数组元素值为与前一位的差值V(n)&#x3D;V(n)-V(n-1)，n&#x3D;2,3,4…</font><br><font style="color:rgb(77, 77, 77);">（2）计算数组中最大值所需占用的大小</font><br><font style="color:rgb(77, 77, 77);">（3）计算数组是否需要拆分，计算拆分后每组的最大值所需占用的大小并记录</font></p><h1 id="PForDelta算法"><a href="#PForDelta算法" class="headerlink" title="PForDelta算法 "></a><font style="color:rgb(77, 77, 77);">PForDelta算法 </font></h1><p><font style="color:rgb(77, 77, 77);">基础思想是对于一个数列，认为其中占多数的x%数据（例90%）占用较小空间，而剩余的少数1-x%（例10%）才是导致数字存储空间过大的异常值。因此，对x%的小数据统一使用较少的b个bit存储，剩下的1-x%数据单独存储。</font></p><p><font style="color:rgb(77, 77, 77);"> 举个例子，假设我们有一串数列23, 41, 8, 12, 30, 68, 18, 45, 21, 9, ..。取b &#x3D; 5，即认为5个bit（32）能存储数列中大部分数字，剩下的超过32的数字单独处理。从可见的队列中，超过32的数字有41, 68, 45。那么PForDelta压缩后的数据如下图所示（图中将超过32的数字称为异常值exception）：</font></p><table><thead><tr><th><font style="color:#DF2A3F;">1</font><font style="color:#000000;">【</font>记录第一异常值的位置<font style="color:#000000;">】</font></th><th>23</th><th><font style="color:#DF2A3F;">3</font></th><th>8</th><th>12</th><th>30</th><th><font style="color:#DF2A3F;">1</font></th><th>18</th><th><font style="color:#DF2A3F;">2</font></th><th>21</th><th>9</th></tr></thead></table><table><thead><tr><th>·······</th><th>45</th><th>68</th><th>41</th></tr></thead></table><p>【用于存储异常值，每个数字占用4Byte，从后向前排列】</p><p>图中第一个单元（5bit）记录第一个异常值的位置，其值为“1”表示间隔1个b-bit之后是第一个异常值。第一个异常值出现在“23”之后，是“41”，其储存的位置在队列的最末端。“3”表示间隔3个b-bit之后，是下一个异常值，即“68”，之后依次类推。异常值用32bit记录，在队列末尾从后向前排列。</p><p><font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);"></font></p><p><font style="color:rgb(0, 0, 0);background-color:rgb(238, 238, 238);"></font></p><h1 id="NewPFD算法"><a href="#NewPFD算法" class="headerlink" title="NewPFD算法"></a><font style="color:rgb(0, 0, 0);">NewPFD算法</font></h1><p><font style="color:rgb(0, 0, 0);">由于PForDelta算法最大的问题是如果异常值间隔太大会造成b-bit放不下。NewPFD的思路是：128个数最多需要7个bit就能保存，如果能将第二部分中保存异常值的32bit进行压缩，省出7bit的空间用于保存这个异常值的位置，问题就迎刃而解了。同时更自然想到，如果异常值位置信息保存在队列后方的32bit中，那么队列第一部分原用于记录异常值间隔的对应部分空间就空余出来了，可以利用这部分做进一步改进。</font></p><p><font style="color:rgb(0, 0, 0);"></font></p><p><font style="color:rgb(0, 0, 0);">因此，NewPFD的算法是，假设128个数中，取b&#x3D;5bit，即32作为阈值。数列中低于32的数字正常存放，数列中大于32的数字，例如41 (101001) 将其低5位（b-bit）放在第一部分，将其剩下的高位（overflow）存放在队列末端。我们依然以PForDelta中的例子作为说明，一个128位数列23, 41, 8, 12, 30, 68, 18, 45, 21, 9, ..。经过NewPFD算法压缩后的形式如下图所示</font><img src="/images/rmb2.png"></p><p><font style="color:rgb(0, 0, 0);">NewPFD算法压缩后的数据依然包括两部分，第一部分128个b-bit数列，省去了第一个异常值位置单元；第二部分异常值部分包含异常值的位置和异常值的高位数字。例如，对于异常值“41”其2进制码为101001，那么低5位01001保存在数据块第一部分。在第二部分中，先保存位置信息（“41”的位置是“1”，表示原数列第2个），再以字节为单位保存高位“1”即“0000 0001”，这样反而只需要附加2个字节（一个保存位置，一个保存高位）就可以储存原本需要4个字节保存的异常值。</font></p><p><font style="color:rgb(0, 0, 0);"></font></p><p><font style="color:rgb(0, 0, 0);">除了数据列，NewPFD算法还需要另外保存b值和高位占的字节数（称为a值）。因为参数ab已经确定了数据块的长度，因此chunk长度值不用再单独记录。</font></p><p><font style="color:rgb(0, 0, 0);"></font></p><h1 id="RBM算法-RoaringBitMap"><a href="#RBM算法-RoaringBitMap" class="headerlink" title="RBM算法(RoaringBitMap)"></a>RBM算法(RoaringBitMap)</h1><p>FOR算法的核心是用减法来缩减数值大小，但是减法一定能缩减大小吗？但数值大小很大时，减法能够达到的效果是不明显的，比如100W,200W,300W,相减后是100W,100W,100W，依然很大，这时的压缩效果很不理想，所以引入了RBM算法。</p><p>RBM的核心就是通过除法来缩减数值大小，但是并不是直接的相除。</p><p><img src="/images/rmb3.png"></p><h2 id="bitmapcontainer【适合稠密的数据】"><a href="#bitmapcontainer【适合稠密的数据】" class="headerlink" title="bitmapcontainer【适合稠密的数据】"></a>bitmapcontainer【适合稠密的数据】</h2><p>这个容器就是位图，只不过这里位图的位数为65536个，也就是2^16个bit, 所占内存就是8kb。然后每一位用0，1表示这个数不存在或者存在，如下图：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>…………..</th><th>65535</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><h2 id="runcontainer"><a href="#runcontainer" class="headerlink" title="runcontainer"></a>runcontainer</h2><p>RunContainer中的Run指的是行程长度压缩算法(Run Length Encoding)，对连续数据有比较好的压缩效果。</p><p>它的原理是，对于连续出现的数字，只记录初始数字和后续数量。即：</p><p>对于数列11，它会压缩为11,0；</p><p>对于数列11,12,13,14,15，它会压缩为11,4；</p><p>对于数列11,12,13,14,15,21,22，它会压缩为11,4,21,1；</p><p>不过这种容器不常用，所以在使用的时候需要自行调用相关的转换函数来判断是不是需要将arraycontiner，或bitmapcontainer转换为runcontainer。</p><p>这种压缩算法的性能和数据的连续性（紧凑性）关系极为密切，对于连续的100个short，它能从200字节压缩为4字节，但对于完全不连续的100个short，编码完之后反而会从200字节变为400字节。</p><p>如果要分析RunContainer的容量，我们可以做下面两种极端的假设：</p><p>最好情况，即只存在一个数据或只存在一串连续数字，那么只会存储2个short，占用4字节</p><p>最坏情况，0~65535的范围内填充所有的奇数位（或所有偶数位），需要存储65536个short，128kb</p><p><img src="/images/mb4.png"></p><p><font style="color:rgb(18, 18, 18);">ArrayContainer一直线性增长，在达到4096后就完全比不上BitmapContainer了</font></p><p><font style="color:rgb(18, 18, 18);">BitmapContainer是一条横线，始终占用8kb</font></p><p><font style="color:rgb(18, 18, 18);">RunContainer比较奇葩，因为和数据的连续性关系太大，因此只能画出一个上下限范围。不管数据量多少，下限始终是4字节；上限在最极端的情况下可以达到128kb。</font></p><p><font style="color:rgb(18, 18, 18);"></font></p><h2 id="RoaringBitmap针对Container的优化策略"><a href="#RoaringBitmap针对Container的优化策略" class="headerlink" title="RoaringBitmap针对Container的优化策略"></a><font style="color:rgb(18, 18, 18);">RoaringBitmap针对Container的优化策略</font></h2><p><strong><font style="color:rgb(18, 18, 18);">创建时：</font></strong></p><ul><li><font style="color:rgb(18, 18, 18);">创建包含单个值的Container时，选用ArrayContainer</font></li><li><font style="color:rgb(18, 18, 18);">创建包含一串连续值的Container时，比较ArrayContainer和RunContainer，选取空间占用较少的</font></li></ul><p><strong><font style="color:rgb(18, 18, 18);">转换：</font></strong></p><p><font style="color:rgb(18, 18, 18);">针对ArrayContainer：</font></p><ul><li><font style="color:rgb(18, 18, 18);">如果插入值后容量超过4096，则自动转换为BitmapContainer。因此正常使用的情况下不会出现容量超过4096的ArrayContainer。</font></li><li><font style="color:rgb(18, 18, 18);">调用runOptimize()方法时，会比较和RunContainer的空间占用大小，选择是否转换为RunContainer。</font></li></ul><p><font style="color:rgb(18, 18, 18);">针对BitmapContainer：</font></p><ul><li><font style="color:rgb(18, 18, 18);">如果删除某值后容量低至4096，则会自动转换为ArrayContainer。因此正常使用的情况下不会出现容量小于4096的BitmapContainer。</font></li><li><font style="color:rgb(18, 18, 18);">调用runOptimize()方法时，会比较和RunContainer的空间占用大小，选择是否转换为RunContainer。</font></li></ul><p><font style="color:rgb(18, 18, 18);">针对RunContainer：</font></p><ul><li><font style="color:rgb(18, 18, 18);">只有在调用runOptimize()方法才会发生转换，会分别和ArrayContainer、BitmapContainer比较空间占用大小，然后选择是否转换。</font></li></ul><p><font style="color:rgb(18, 18, 18);"></font></p><p><font style="color:rgb(69, 69, 69);">keys数组和values数组的大小总是相等且配对的，当new一个空的RoaringBitmap时，size&#x3D;0；当添加一个数字a时，size&#x3D;1，当添加数字b时，如果数字b的高16位与数字a的高16位不同，则keys数组需要扩容，size&#x3D;2；如果相同，keys不需要扩容，size仍然等于1</font></p><h2 id="读取性能"><a href="#读取性能" class="headerlink" title="读取性能"></a>读取性能</h2><p>增删改查的时间复杂度方面，BitmapContainer只涉及到位运算且可以根据下标直接寻址，显然为O(1)。而ArrayContainer和RunContainer都需要用二分查找在有序数组中定位元素，故为O(logN)。</p><p>ArrayContainer一直线性增长，在达到4096后就完全比不上BitmapContainer了</p><p>BitmapContainer是一条横线，始终占用8kb</p><p>RunContainer比较奇葩，因为和数据的连续性关系太大，因此只能画出一个上下限范围。不管数据量多少，下限始终是4字节；上限在最极端的情况下可以达到128kb。</p><h2 id="与bitmap的性能对比"><a href="#与bitmap的性能对比" class="headerlink" title="与bitmap的性能对比"></a>与bitmap的性能对比</h2><p>roaringbitmap除了比bitmap占用内存少之外，其并集和交集操作的速度也要比bitmap的快，原因如下：</p><p>对于roaringbitmap本质上是将大块的bitmap分成各个小块，其中每个小块在需要存储数据的时候才会存在。所以当进行交集或并集运算的时候，roaringbitmap只需要去计算存在的一些块而不需要像bitmap那样对整个大的块进行计算。如果块内非常稀疏，那么只需要对这些小整数列表进行集合的 AND、OR 运算，这样的话计算量还能继续减轻。</p><h2 id="RBM算法的核心步骤如下："><a href="#RBM算法的核心步骤如下：" class="headerlink" title="RBM算法的核心步骤如下："></a>RBM算法的核心步骤如下：</h2><p>（1）数组中每个数除以2^16，以商,余数的形式表示出来</p><p>（2）将相同商的归在一个Container，如果Contaniner中数值容量超过4096使用bitmap的形式来存储一个Container中的数，如果没有超过那就使用short[]来存储，如果是连续数组那就使用RunContainer来存储</p><h2 id="针对long整数的扩展【64-bit-integers-long-】"><a href="#针对long整数的扩展【64-bit-integers-long-】" class="headerlink" title="针对long整数的扩展【64-bit integers (long)】"></a>针对long整数的扩展【64-bit integers (long)】</h2><p>虽然RoaringBitmap是为32位的情况设计的，但对64位整数进行了扩展。为此提供了两个类:Roaring64NavigableMap和Roaring64Bitmap。</p><h3 id="Roaring64NavigableMap"><a href="#Roaring64NavigableMap" class="headerlink" title="Roaring64NavigableMap"></a>Roaring64NavigableMap</h3><p><font style="color:rgb(18, 18, 18);">Roaring64NavigableMap也是使用拆分模式，将一个long类型数据，拆分为高32位与低32位，高32位代表索引，低32位存储到对应RoaringBitmap中，其内部是一个TreeMap类型的结构，会按照signed或者unsigned进行排序，key代表高32位，value代表对应的RoaringBitmap。示意图如下：</font></p><p><img src="/images/rmb5.png"></p><h3 id="Roaring64Bitmap"><a href="#Roaring64Bitmap" class="headerlink" title="Roaring64Bitmap"></a>Roaring64Bitmap</h3><p>依赖ART数据结构来保存键&#x2F;值对。键由元素的最重要的48位组成，而值是16位的Roaring容器。</p>]]></content>
    
    
    <categories>
      
      <category>roaringbitmap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>压缩算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kafka时间轮</title>
    <link href="/2025/04/24/kafka%E6%97%B6%E9%97%B4%E8%BD%AE/"/>
    <url>/2025/04/24/kafka%E6%97%B6%E9%97%B4%E8%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><font style="color:rgb(77, 77, 77);">Kafka中存在大量的延迟操作。</font><font style="color:rgb(51, 51, 51);">在kafka中，有许多请求并不是立即返回，而且处理完一些异步操作或者等待某些条件达成后才返回，这些请求一般都会带有timeout参数，表示如果timeout时间后服务端还不满足返回的条件，就判定此次请求为超时，这时候kafka同样要返回</font><strong><font style="color:rgb(51, 51, 51);">超时的响应给客户端</font></strong><font style="color:rgb(51, 51, 51);">，这样客户端才知道此次请求超时了。比如ack&#x3D;-1的producer请求，就需要等待所有的isr备份完成了才可以返回给客户端，或者到达timeout时间了返回超时响应给客户端。 </font></p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE%E4%B8%80.png" alt="图1"></p><p><font style="color:rgb(51, 51, 51);">上面的场景，可以用延迟任务来实现。也就是定义一个任务，在timeout时间后执行，执行的内容一般就是先检查返回条件是否满足，满足的话就返回客户端需要的响应，如果还是不满足，就发送超时响应给客户端。</font></p><p><font style="color:rgb(51, 51, 51);">对于延迟操作，java自带的实现有</font><font style="color:rgb(77, 77, 77);">Timer和DelayQueue</font><font style="color:rgb(51, 51, 51);">。基于一个延迟队列，在准备执行一个延迟任务时，将其插入到延迟队列中。这些延迟队列其实就是一个用最小堆实现的优先级队列，因此，插入一个任务的时间复杂度是</font><font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">,取出一个任务执行后调整堆的时间也是</font><font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">如果要执行的延迟任务不多，</font><font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">的速度已经够快了。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE2.png" alt="图2"></p><p>每次的添加元素都要维护小根堆，设想有几十万上百万的元素。<font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">的速度还不够。</font></p><p><font style="color:rgb(51, 51, 51);">为了追求更快的速度，kafka的设计者使用了Timing Wheel的数据结构，让任务的插入时间复杂度达到了O(1)。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><h2 id="时间轮"><a href="#时间轮" class="headerlink" title="时间轮"></a><font style="color:rgb(51, 51, 51);">时间轮</font></h2><p>Kafka中的时间轮（TimingWheel）是一个存储定时任务的环形队列，底层采用数组实现，数组中的每个元素可以存放一个定时任务列表（TimerTaskList）。TimerTaskList是一个环形的双向链表，链表中的每一项表示的都是定时任务项（TimerTaskEntry），其中封装了真正的定时任务TimerTask。</p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE3.png" alt="图3"></p><p>时间轮由多个时间格组成，每个时间格代表当前时间轮的基本时间跨度（tickMs）。时间轮的时间格个数是固定的，可用wheelSize来表示，那么整个时间轮的总体时间跨度（interval）可以通过公式 tickMs × wheelSize计算得出。时间轮还有一个表盘指针（currentTime），用来表示时间轮当前所处的时间，currentTime是tickMs的整数倍。currentTime可以将整个时间轮划分为到期部分和未到期部分，currentTime当前指向的时间格也属于到期部分，表示刚好到期，需要处理此时间格所对应的TimerTaskList的所有任务。</p><h2 id="向时间轮中插入数据"><a href="#向时间轮中插入数据" class="headerlink" title="向时间轮中插入数据"></a>向时间轮中插入数据</h2><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE4.png" alt="图4"></p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE5.png" alt="图5"></p><p>若时间轮的tickMs&#x3D;1ms，wheelSize&#x3D;20，那么可以计算得出interval为20ms。当前表盘指针currentTime指向时间格1，此时有一个定时为7ms的任务插入进来会存放到时间格为的TimerTaskList中。随着时间的不断推移，指针currentTime不断向前推进，过了7ms之后，当到达时间格8时，就需要将时间格8所对应的TimeTaskList中的任务做相应的到期操作。总之，整个时间轮的总体跨度是不变的，随着指针currentTime的不断推进，当前时间轮所能处理的时间段也在不断后移，总体时间范围在currentTime和currentTime+interval之间。</p><p>如果此时有个定时为350ms的任务该如何处理？直接扩充wheelSize的大小么？Kafka中不乏几万甚至几十万毫秒的定时任务，这个wheelSize的扩充没有底线，就算将所有的定时任务的到期时间都设定一个上限，比如100万毫秒，那么这个wheelSize为100万毫秒的时间轮不仅占用很大的内存空间，而且效率也会拉低。Kafka为此引入了层级时间轮的概念，当任务的到期时间超过了当前时间轮所表示的时间范围时，就会尝试添加到上层时间轮中。</p><h2 id="时间轮升级和降级"><a href="#时间轮升级和降级" class="headerlink" title="时间轮升级和降级"></a>时间轮升级和降级</h2><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE6.png" alt="图6"></p><p>Kafka中的定时器只需持有TimingWheel的第一层时间轮的引用，并不会直接持有其他高层的时间轮，但是每一层时间轮都会有一个引用（overflowWheel）指向更高一层的应用，以此层级调用而可以实现定时器间接持有各个层级时间轮的引用。</p><h2 id="时间轮空转"><a href="#时间轮空转" class="headerlink" title="时间轮空转"></a>时间轮空转</h2><p>Kafka中的定时器借助了JDK中的DelayQueue来协助推进时间轮。具体做法是对于每个使用到的TimerTaskList都会加入到DelayQueue中。DelayQueue会根据TimerTaskList对应的超时时间expiration来排序，最短expiration的TimerTaskList会被排在DelayQueue的队头。Kafka中会有一个线程来获取DelayQueue中的到期的任务列表，有意思的是这个线程所对应的名称叫做“ExpiredOperationReaper”，可以直译为“过期操作收割机”，和“SkimpyOffsetMap”的取名有的一拼。当“收割机”线程获取到DelayQueue中的超时的任务列表TimerTaskList之后，既可以根据TimerTaskList的expiration来推进时间轮的时间，也可以就获取到的TimerTaskList执行相应的操作，对立面的TimerTaskEntry该执行过期操作的就执行过期操作，该降级时间轮的就降级时间轮。</p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE7.png" alt="图7"></p><p>借助了延迟队列，那是时间轮的意义是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTimerTaskEntry</span><span class="hljs-params">(TimerTaskEntry timerTaskEntry)</span> &#123;<br><span class="hljs-keyword">if</span> (!timingWheel.add(timerTaskEntry)) &#123;<br>    <span class="hljs-comment">// Already expired or cancelled</span><br>    <span class="hljs-keyword">if</span> (!timerTaskEntry.cancelled()) &#123;<br>        taskExecutor.submit(timerTaskEntry.timerTask);<br>    &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Advances the clock if there is an expired bucket. If there isn&#x27;t any expired bucket when called,</span><br><span class="hljs-comment">     * waits up to timeoutMs before giving up.</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">advanceClock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutMs)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">TimerTaskList</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> delayQueue.poll(timeoutMs, TimeUnit.MILLISECONDS);<br>    <span class="hljs-keyword">if</span> (bucket != <span class="hljs-literal">null</span>) &#123;<br>        writeLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (bucket != <span class="hljs-literal">null</span>) &#123;<br>                timingWheel.advanceClock(bucket.getExpiration());<br>                bucket.flush(<span class="hljs-built_in">this</span>::addTimerTaskEntry);<br>                bucket = delayQueue.poll();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            writeLock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(TimerTaskEntry timerTaskEntry)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> timerTaskEntry.expirationMs;<br><br>        <span class="hljs-keyword">if</span> (timerTaskEntry.cancelled()) &#123;<br>            <span class="hljs-comment">// Cancelled</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expiration &lt; currentTimeMs + tickMs) &#123;<br>            <span class="hljs-comment">// Already expired</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expiration &lt; currentTimeMs + interval) &#123;<br>            <span class="hljs-comment">// Put in its own bucket</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">virtualId</span> <span class="hljs-operator">=</span> expiration / tickMs;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bucketId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (virtualId % (<span class="hljs-type">long</span>) wheelSize);<br>            <span class="hljs-type">TimerTaskList</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> buckets[bucketId];<br>            bucket.add(timerTaskEntry);<br><br>            <span class="hljs-comment">// Set the bucket expiration time</span><br>            <span class="hljs-keyword">if</span> (bucket.setExpiration(virtualId * tickMs)) &#123;<br>                <span class="hljs-comment">// The bucket needs to be enqueued because it was an expired bucket</span><br>                <span class="hljs-comment">// We only need to enqueue the bucket when its expiration time has changed, i.e. the wheel has advanced</span><br>                <span class="hljs-comment">// and the previous buckets gets reused; further calls to set the expiration within the same wheel cycle</span><br>                <span class="hljs-comment">// will pass in the same value and hence return false, thus the bucket with the same expiration will not</span><br>                <span class="hljs-comment">// be enqueued multiple times.</span><br>                queue.offer(bucket);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Out of the interval. Put it into the parent timer</span><br>            <span class="hljs-keyword">if</span> (overflowWheel == <span class="hljs-literal">null</span>) addOverflowWheel();<br>            <span class="hljs-keyword">return</span> overflowWheel.add(timerTaskEntry);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">advanceClock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeMs)</span> &#123;<br>        <span class="hljs-keyword">if</span> (timeMs &gt;= currentTimeMs + tickMs) &#123;<br>            currentTimeMs = timeMs - (timeMs % tickMs);<br><br>            <span class="hljs-comment">// Try to advance the clock of the overflow wheel if present</span><br>            <span class="hljs-keyword">if</span> (overflowWheel != <span class="hljs-literal">null</span>) overflowWheel.advanceClock(currentTimeMs);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="XXL-JOB中的时间轮"><a href="#XXL-JOB中的时间轮" class="headerlink" title="XXL-JOB中的时间轮"></a>XXL-JOB中的时间轮</h2><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE8.png" alt="图8"></p>]]></content>
    
    
    <categories>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时间轮</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/15/hello-world/"/>
    <url>/2025/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
