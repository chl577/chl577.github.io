<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kafka时间轮</title>
    <link href="/2025/04/24/kafka%E6%97%B6%E9%97%B4%E8%BD%AE/"/>
    <url>/2025/04/24/kafka%E6%97%B6%E9%97%B4%E8%BD%AE/</url>
    
    <content type="html"><![CDATA[<p><font style="color:rgb(77, 77, 77);">Kafka中存在大量的延迟操作。</font><font style="color:rgb(51, 51, 51);">在kafka中，有许多请求并不是立即返回，而且处理完一些异步操作或者等待某些条件达成后才返回，这些请求一般都会带有timeout参数，表示如果timeout时间后服务端还不满足返回的条件，就判定此次请求为超时，这时候kafka同样要返回</font><strong><font style="color:rgb(51, 51, 51);">超时的响应给客户端</font></strong><font style="color:rgb(51, 51, 51);">，这样客户端才知道此次请求超时了。比如ack&#x3D;-1的producer请求，就需要等待所有的isr备份完成了才可以返回给客户端，或者到达timeout时间了返回超时响应给客户端。 </font></p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE%E4%B8%80.png" alt="图1"></p><p><font style="color:rgb(51, 51, 51);">上面的场景，可以用延迟任务来实现。也就是定义一个任务，在timeout时间后执行，执行的内容一般就是先检查返回条件是否满足，满足的话就返回客户端需要的响应，如果还是不满足，就发送超时响应给客户端。</font></p><p><font style="color:rgb(51, 51, 51);">对于延迟操作，java自带的实现有</font><font style="color:rgb(77, 77, 77);">Timer和DelayQueue</font><font style="color:rgb(51, 51, 51);">。基于一个延迟队列，在准备执行一个延迟任务时，将其插入到延迟队列中。这些延迟队列其实就是一个用最小堆实现的优先级队列，因此，插入一个任务的时间复杂度是</font><font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">,取出一个任务执行后调整堆的时间也是</font><font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">。</font></p><p><font style="color:rgb(51, 51, 51);">如果要执行的延迟任务不多，</font><font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">的速度已经够快了。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE2.png" alt="图2"></p><p>每次的添加元素都要维护小根堆，设想有几十万上百万的元素。<font style="color:rgb(77, 77, 77);">O(nlog(n))</font><font style="color:rgb(51, 51, 51);">的速度还不够。</font></p><p><font style="color:rgb(51, 51, 51);">为了追求更快的速度，kafka的设计者使用了Timing Wheel的数据结构，让任务的插入时间复杂度达到了O(1)。</font></p><p><font style="color:rgb(51, 51, 51);"></font></p><h2 id="时间轮"><a href="#时间轮" class="headerlink" title="时间轮"></a><font style="color:rgb(51, 51, 51);">时间轮</font></h2><p>Kafka中的时间轮（TimingWheel）是一个存储定时任务的环形队列，底层采用数组实现，数组中的每个元素可以存放一个定时任务列表（TimerTaskList）。TimerTaskList是一个环形的双向链表，链表中的每一项表示的都是定时任务项（TimerTaskEntry），其中封装了真正的定时任务TimerTask。</p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE3.png" alt="图3"></p><p>时间轮由多个时间格组成，每个时间格代表当前时间轮的基本时间跨度（tickMs）。时间轮的时间格个数是固定的，可用wheelSize来表示，那么整个时间轮的总体时间跨度（interval）可以通过公式 tickMs × wheelSize计算得出。时间轮还有一个表盘指针（currentTime），用来表示时间轮当前所处的时间，currentTime是tickMs的整数倍。currentTime可以将整个时间轮划分为到期部分和未到期部分，currentTime当前指向的时间格也属于到期部分，表示刚好到期，需要处理此时间格所对应的TimerTaskList的所有任务。</p><h2 id="向时间轮中插入数据"><a href="#向时间轮中插入数据" class="headerlink" title="向时间轮中插入数据"></a>向时间轮中插入数据</h2><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE4.png" alt="图4"></p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE5.png" alt="图5"></p><p>若时间轮的tickMs&#x3D;1ms，wheelSize&#x3D;20，那么可以计算得出interval为20ms。当前表盘指针currentTime指向时间格1，此时有一个定时为7ms的任务插入进来会存放到时间格为的TimerTaskList中。随着时间的不断推移，指针currentTime不断向前推进，过了7ms之后，当到达时间格8时，就需要将时间格8所对应的TimeTaskList中的任务做相应的到期操作。总之，整个时间轮的总体跨度是不变的，随着指针currentTime的不断推进，当前时间轮所能处理的时间段也在不断后移，总体时间范围在currentTime和currentTime+interval之间。</p><p>如果此时有个定时为350ms的任务该如何处理？直接扩充wheelSize的大小么？Kafka中不乏几万甚至几十万毫秒的定时任务，这个wheelSize的扩充没有底线，就算将所有的定时任务的到期时间都设定一个上限，比如100万毫秒，那么这个wheelSize为100万毫秒的时间轮不仅占用很大的内存空间，而且效率也会拉低。Kafka为此引入了层级时间轮的概念，当任务的到期时间超过了当前时间轮所表示的时间范围时，就会尝试添加到上层时间轮中。</p><h2 id="时间轮升级和降级"><a href="#时间轮升级和降级" class="headerlink" title="时间轮升级和降级"></a>时间轮升级和降级</h2><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE6.png" alt="图6"></p><p>Kafka中的定时器只需持有TimingWheel的第一层时间轮的引用，并不会直接持有其他高层的时间轮，但是每一层时间轮都会有一个引用（overflowWheel）指向更高一层的应用，以此层级调用而可以实现定时器间接持有各个层级时间轮的引用。</p><h2 id="时间轮空转"><a href="#时间轮空转" class="headerlink" title="时间轮空转"></a>时间轮空转</h2><p>Kafka中的定时器借助了JDK中的DelayQueue来协助推进时间轮。具体做法是对于每个使用到的TimerTaskList都会加入到DelayQueue中。DelayQueue会根据TimerTaskList对应的超时时间expiration来排序，最短expiration的TimerTaskList会被排在DelayQueue的队头。Kafka中会有一个线程来获取DelayQueue中的到期的任务列表，有意思的是这个线程所对应的名称叫做“ExpiredOperationReaper”，可以直译为“过期操作收割机”，和“SkimpyOffsetMap”的取名有的一拼。当“收割机”线程获取到DelayQueue中的超时的任务列表TimerTaskList之后，既可以根据TimerTaskList的expiration来推进时间轮的时间，也可以就获取到的TimerTaskList执行相应的操作，对立面的TimerTaskEntry该执行过期操作的就执行过期操作，该降级时间轮的就降级时间轮。</p><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE7.png" alt="图7"></p><p>借助了延迟队列，那是时间轮的意义是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addTimerTaskEntry</span><span class="hljs-params">(TimerTaskEntry timerTaskEntry)</span> &#123;<br><span class="hljs-keyword">if</span> (!timingWheel.add(timerTaskEntry)) &#123;<br>    <span class="hljs-comment">// Already expired or cancelled</span><br>    <span class="hljs-keyword">if</span> (!timerTaskEntry.cancelled()) &#123;<br>        taskExecutor.submit(timerTaskEntry.timerTask);<br>    &#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Advances the clock if there is an expired bucket. If there isn&#x27;t any expired bucket when called,</span><br><span class="hljs-comment">     * waits up to timeoutMs before giving up.</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">advanceClock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeoutMs)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-type">TimerTaskList</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> delayQueue.poll(timeoutMs, TimeUnit.MILLISECONDS);<br>    <span class="hljs-keyword">if</span> (bucket != <span class="hljs-literal">null</span>) &#123;<br>        writeLock.lock();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (bucket != <span class="hljs-literal">null</span>) &#123;<br>                timingWheel.advanceClock(bucket.getExpiration());<br>                bucket.flush(<span class="hljs-built_in">this</span>::addTimerTaskEntry);<br>                bucket = delayQueue.poll();<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            writeLock.unlock();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">add</span><span class="hljs-params">(TimerTaskEntry timerTaskEntry)</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">expiration</span> <span class="hljs-operator">=</span> timerTaskEntry.expirationMs;<br><br>        <span class="hljs-keyword">if</span> (timerTaskEntry.cancelled()) &#123;<br>            <span class="hljs-comment">// Cancelled</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expiration &lt; currentTimeMs + tickMs) &#123;<br>            <span class="hljs-comment">// Already expired</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expiration &lt; currentTimeMs + interval) &#123;<br>            <span class="hljs-comment">// Put in its own bucket</span><br>            <span class="hljs-type">long</span> <span class="hljs-variable">virtualId</span> <span class="hljs-operator">=</span> expiration / tickMs;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">bucketId</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (virtualId % (<span class="hljs-type">long</span>) wheelSize);<br>            <span class="hljs-type">TimerTaskList</span> <span class="hljs-variable">bucket</span> <span class="hljs-operator">=</span> buckets[bucketId];<br>            bucket.add(timerTaskEntry);<br><br>            <span class="hljs-comment">// Set the bucket expiration time</span><br>            <span class="hljs-keyword">if</span> (bucket.setExpiration(virtualId * tickMs)) &#123;<br>                <span class="hljs-comment">// The bucket needs to be enqueued because it was an expired bucket</span><br>                <span class="hljs-comment">// We only need to enqueue the bucket when its expiration time has changed, i.e. the wheel has advanced</span><br>                <span class="hljs-comment">// and the previous buckets gets reused; further calls to set the expiration within the same wheel cycle</span><br>                <span class="hljs-comment">// will pass in the same value and hence return false, thus the bucket with the same expiration will not</span><br>                <span class="hljs-comment">// be enqueued multiple times.</span><br>                queue.offer(bucket);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Out of the interval. Put it into the parent timer</span><br>            <span class="hljs-keyword">if</span> (overflowWheel == <span class="hljs-literal">null</span>) addOverflowWheel();<br>            <span class="hljs-keyword">return</span> overflowWheel.add(timerTaskEntry);<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">advanceClock</span><span class="hljs-params">(<span class="hljs-type">long</span> timeMs)</span> &#123;<br>        <span class="hljs-keyword">if</span> (timeMs &gt;= currentTimeMs + tickMs) &#123;<br>            currentTimeMs = timeMs - (timeMs % tickMs);<br><br>            <span class="hljs-comment">// Try to advance the clock of the overflow wheel if present</span><br>            <span class="hljs-keyword">if</span> (overflowWheel != <span class="hljs-literal">null</span>) overflowWheel.advanceClock(currentTimeMs);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="XXL-JOB中的时间轮"><a href="#XXL-JOB中的时间轮" class="headerlink" title="XXL-JOB中的时间轮"></a>XXL-JOB中的时间轮</h2><p><img src="/images/kafka%E6%97%B6%E9%97%B4%E8%BD%AE%E5%9B%BE8.png" alt="图8"></p>]]></content>
    
    
    <categories>
      
      <category>kafka</category>
      
    </categories>
    
    
    <tags>
      
      <tag>时间轮</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/04/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/04/15/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一个测试文章1111111222<br><img src="/images/test.png" alt="图片标题"></p><p><img src="/images/test2.png" alt="图片标题2"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;ad&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">123</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/15/hello-world/"/>
    <url>/2025/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
